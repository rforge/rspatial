library(gstat)
zn.uk = krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid,
    model = v.model)
q()
spplot(nc, c("SID74"))
a=b=1
a
b
postscript()
source("gallery.R", echo=T)
q()
library(maps)
maps(world)
#maps(world)
?maps
?map
map("world")
ls(pos=2)
xx=map("world")
class(xx)
xx
names(xx)
yy=as.SpatialRings.map(xx, xx$names)
length(yy)
length(xx$names)
xx$range
yy=as.SpatialRings.map(xx, paste("pol", 1:3903,sep=""))
map("netherlands")
map("Netherlands")
map("states")
?map
map("state")
xx=map("state")
yy=sp:::.NAmat2xyList(cbind(xx$x, xx$y))
length(yy)
yy=as.SpatialRings.map(xx, paste("pol", 1:169,sep=""))
?map
xx=map("state", boundary=F)
xx=map("state", boundary=T)
q()
bbox(meuse)
bbox(meuse)
bbox(meuse.grid)
bb=bbox(meuse.grid)
bb$min
bb[,1]=bb[,1]-1000
bb[,2]=bb[,2]+1000
bb
riv
riv@lines
riv@polygons
riv@polygons@Srings
riv@polygons@rings
slotNames(riv@polygons)
riv@polygons[[1]]
riv@polygons[[1]]@Sring
riv@polygons[[1]][[1]]
class(riv@polygons[[1]]@Sring
)
class(riv@polygons[[1]])
slotNames(riv@polygons[[1]])
riv@polygons[[1]]@Srings
riv@polygons[[1]]@Srings[[1]]
slotNames(riv@polygons[[1]]@Srings[[1]])
riv@polygons[[1]]@Srings[[1]]@coords
cc = riv@polygons[[1]]@Srings[[1]]@coords
class(cc)
dim(cc)
sel =cc[cc[,1]>bb[1,1]&cc[,1]<bb[1,2]&cc[,2]>bb[2,1]&cc[,2]<bb[2,2]]
sel
sel
image(meuse.grid)
lines(sel)
plot(sel,type="l")
image(meuse.grid,add=T)
bb[,1]=bb[,1]-3000
bb[,2]=bb[,2]+3000
sel =cc[cc[,1]>bb[1,1]&cc[,1]<bb[1,2]&cc[,2]>bb[2,1]&cc[,2]<bb[2,2],]
plot(sel,type="l",asp=1)
sel[118,]=sel[1,]
plot(sel,type="l",asp=1)
sel =cc[cc[,1]>bb[1,1]&cc[,1]<bb[1,2]&cc[,2]>bb[2,1]&cc[,2]<bb[2,2],]
dim(sel)
sel[176,]=sel[1,]
sel=rbind(sel,sel[1,])
dump(sel)
q()
?dump
?round
round(sel)
round(sel,digits=8)
sel=round(sel,digits=8)
q()
selx=round(sel,digits=1)
selx
dump("sel")
q()
?round
dump("selx")
q()
image(meuse.grid,"dist",add=T)
names(meuse.grid)
class(meuse.grid)
image(meuse.grid,add=T)
?image
filled.contour(meuse.grid,"dist",add=T)
filled.contour(meuse.grid,"dist",add=F)
filled.contour(as.image(meuse.grid,"dist"),add=F)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid,"dist"),add=F)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid,"dist"),add=T)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid,"dist"))
?filled.contour
filled.contour(as.matrix(meuse.grid["dist"]))
filled.contour(as.image.SpatialGridDataFrame(meuse.grid,"dist")$z)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid["dist"])$z)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid["dist"])$z,asp=1)
filled.contour(as.image.SpatialGridDataFrame(meuse.grid["dist"])$z,asp=1,add=1)
q()
data(meuse.riv)
plot(meuse.riv,type="l",asp=1)
image(meuse.grid,"dist",add=T)
image(meuse.grid,"dist",add=T,col=bpy.colors())
Sring(meuse.riv)
Srings(list(Sring(meuse.riv)))
Srings(list(Sring(meuse.riv)),"meuse.riv")
SpatialRings(list(Srings(list(Sring(meuse.riv)),"meuse.riv")))
class(meuse.sr)
spplot(meuse.grid,sp.layout=list(meuse.sr)
)
spplot(meuse.grid,sp.layout=list("sp.rings", meuse.sr))
spplot(meuse.grid,sp.layout=list("sp.polygons", meuse.sr))
spplot(meuse.grid,sp.layout=list("sp.polygon", meuse.sr))
spplot(meuse.grid,sp.layout=list(list("sp.polygon", meuse.sr),list("sp.points",meuse)))
spplot(meuse.grid,sp.layout=list(list("sp.polygon", meuse.sr),list("sp.points",meuse,pch="+")))
spplot(meuse.grid,sp.layout=list(list("sp.polygon", meuse.sr),list("sp.points",meuse,pch="+",col="grey")))
spplot(meuse.grid,sp.layout=list(list("sp.polygon", meuse.sr),list("sp.points",meuse,pch="+",col="black")))
spplot(meuse.grid, col.regions=bpy.colors(),
  sp.layout=list(
    list("sp.polygon", meuse.sr),
    list("sp.points", meuse, pch="+", col="black")
  )
)
spplot(meuse, "zinc", col.regions=bpy.colors(),
  sp.layout= list("sp.polygon", meuse.sr, col = "blue")
)
spplot(meuse, "zinc", col.regions=bpy.colors(),
  sp.layout= list("sp.polygon", meuse.sr, fill = "lightblue")
)
spplot(meuse, "zinc", col.regions=bpy.colors(),
  cuts = c(100,200,500,1000,2000),
  sp.layout= list("sp.polygon", meuse.sr, fill = "lightblue")
)
summary(meuse["zinc"])
summary(meuse[["zinc"]])
spplot(meuse, "zinc", col.regions=bpy.colors(),
  cuts = c(100,200,400,700,1200,2000),
  sp.layout= list("sp.polygon", meuse.sr, fill = "lightblue")
)
spplot(meuse, "zinc", col.regions=bpy.colors(),
  cuts = c(100,200,400,700,1200,2000), key.space = "right",
  sp.layout= list("sp.polygon", meuse.sr, fill = "lightblue")
)
meuse.sr = SpatialRings(list(Srings(list(Sring(meuse.riv)),"meuse.riv")))
q()
riv.shp$att.data
riv.shape$att.data
ls()
q()
names(meuse)
class(meuse)
class(meuse)
names(meuse)
meuse[["ffreq"]]
meuse.grid[["ffreq"]]
x
library(gstat)
x=krige(ffreq~1,meuse,meuse.grid,nmax=1)
x[["var1.pred"]]
x=krige(ffreq~1,meuse.grid,meuse,nmax=1)
x[["var1.pred"]]
x[["var1.pred"]]-meuse[["ffreq"]]
any(x[["var1.pred"]]!=meuse[["ffreq"]])
(x[["var1.pred"]]!=meuse[["ffreq"]])
(x[["var1.pred"]]==meuse[["ffreq"]])
mean(x[["var1.pred"]]==meuse[["ffreq"]])
sum(x[["var1.pred"]]==meuse[["ffreq"]])
meuse[["ff"]]=factor(meuse[["ffreq"]])
spplot(meuse, "ff")
q()
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
v.ok = variogram(log(zinc)~1, meuse)
ok.model = fit.variogram(v, vgm(1, "Exp", 500, 1))
plot(v.ok, ok.model, main = "ordinary kriging")
v.uk = variogram(log(zinc)~sqrt(dist), meuse)
uk.model = fit.variogram(v, vgm(1, "Exp", 300, 1))
plot(v.uk, uk.model, main = "universal kriging")
meuse[["ff"]] = factor(meuse[["ffreq"]])
meuse.grid[["ff"]] = factor(meuse.grid[["ffreq"]])
v.sk = variogram(log(zinc)~ff, meuse)
sk.model = fit.variogram(v, vgm(1, "Exp", 300, 1))
plot(v.sk, sk.model, main = "stratified kriging")
zn.ok = krige(log(zinc)~1,          meuse, meuse.grid, model = ok.model)
zn.uk = krige(log(zinc)~sqrt(dist), meuse, meuse.grid, model = uk.model)
zn.sk = krige(log(zinc)~ff,         meuse, meuse.grid, model = sk.model)
zn.id = krige(log(zinc)~ff,         meuse, meuse.grid)
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
spplot(zn, c("a", "b", "c", "d"), main = "log-zinc",
    names.attr = c("ordinary kriging", "universal kriging",
        "stratified kriging", "invese distance"),
    col.regions = bpy.colors()
)
q()
library(gstat)
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
v.ok = variogram(log(zinc)~1, meuse)
ok.model = fit.variogram(v.ok, vgm(1, "Exp", 500, 1))
plot(v.ok, ok.model, main = "ordinary kriging")
v.uk = variogram(log(zinc)~sqrt(dist), meuse)
uk.model = fit.variogram(v.uk, vgm(1, "Exp", 300, 1))
plot(v.uk, uk.model, main = "universal kriging")
meuse[["ff"]] = factor(meuse[["ffreq"]])
meuse.grid[["ff"]] = factor(meuse.grid[["ffreq"]])
v.sk = variogram(log(zinc)~ff, meuse)
sk.model = fit.variogram(v.sk, vgm(1, "Exp", 300, 1))
plot(v.sk, sk.model, main = "stratified kriging")
zn.ok = krige(log(zinc)~1,          meuse, meuse.grid, model = ok.model)
zn.uk = krige(log(zinc)~sqrt(dist), meuse, meuse.grid, model = uk.model)
zn.sk = krige(log(zinc)~ff,         meuse, meuse.grid, model = sk.model)
zn.id = krige(log(zinc)~ff,         meuse, meuse.grid)
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
spplot(zn, c("a", "b", "c", "d"), main = "log-zinc",
    names.attr = c("ordinary kriging", "universal kriging",
        "stratified kriging", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE,
)
?spplot
q()
library(gstat)
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
v.ok = variogram(log(zinc)~1, meuse)
ok.model = fit.variogram(v.ok, vgm(1, "Exp", 500, 1))
plot(v.ok, ok.model, main = "ordinary kriging")
v.uk = variogram(log(zinc)~sqrt(dist), meuse)
uk.model = fit.variogram(v.uk, vgm(1, "Exp", 300, 1))
plot(v.uk, uk.model, main = "universal kriging")
meuse[["ff"]] = factor(meuse[["ffreq"]])
meuse.grid[["ff"]] = factor(meuse.grid[["ffreq"]])
v.sk = variogram(log(zinc)~ff, meuse)
sk.model = fit.variogram(v.sk, vgm(1, "Exp", 300, 1))
plot(v.sk, sk.model, main = "stratified kriging")
zn.ok = krige(log(zinc)~1,          meuse, meuse.grid, model = ok.model)
zn.uk = krige(log(zinc)~sqrt(dist), meuse, meuse.grid, model = uk.model)
zn.sk = krige(log(zinc)~ff,         meuse, meuse.grid, model = sk.model)
zn.id = krige(log(zinc)~ff,         meuse, meuse.grid)
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging",
        "stratified kriging", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE, main = "log-zinc"
)
q()
library(gstat)
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
v.ok = variogram(log(zinc)~1, meuse)
ok.model = fit.variogram(v.ok, vgm(1, "Exp", 500, 1))
plot(v.ok, ok.model, main = "ordinary kriging")
v.uk = variogram(log(zinc)~sqrt(dist), meuse)
uk.model = fit.variogram(v.uk, vgm(1, "Exp", 300, 1))
plot(v.uk, uk.model, main = "universal kriging")
meuse[["ff"]] = factor(meuse[["ffreq"]])
meuse.grid[["ff"]] = factor(meuse.grid[["ffreq"]])
v.sk = variogram(log(zinc)~ff, meuse)
sk.model = fit.variogram(v.sk, vgm(1, "Exp", 300, 1))
plot(v.sk, sk.model, main = "stratified kriging")
zn.ok = krige(log(zinc)~1,          meuse, meuse.grid, model = ok.model)
zn.uk = krige(log(zinc)~sqrt(dist), meuse, meuse.grid, model = uk.model)
zn.sk = krige(log(zinc)~ff,         meuse, meuse.grid, model = sk.model)
zn.id = krige(log(zinc)~1,          meuse, meuse.grid)
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging",
        "stratified kriging", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE, main = "log-zinc"
)
q()
library(sp)
text1 = list("sp.text", c(180500,329900), "0", which = 4)
text2 = list("sp.text", c(181000,329900), "500 m", which = 4)
scale = list("SpatialRingsRescale", layout.scale.bar(),
    offset = c(180500,329800), scale = 500, fill=c("transparent","black"), which = 4)
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging with dist",
        "stratified kriging", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE, main = "log-zinc interpolation",
    sp.layout = list(rv, scale, text1, text2)
)
q()
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging with dist to river",
        "stratified kriging with flood freq", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE, main = "log-zinc interpolation",
    sp.layout = list(rv, scale, text1, text2)
)
q()
library(sp)
text1 = list("sp.text", c(180500,329900), "0", which = 4)
text2 = list("sp.text", c(181000,329900), "  500 m", which = 4)
scale = list("SpatialRingsRescale", layout.scale.bar(),
    offset = c(180500,329800), scale = 500, fill=c("transparent","black"), which = 4)
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging with dist to river",
        "stratified kriging with flood freq", "inverse distance"),
    col.regions = bpy.colors(), as.table = TRUE, main = "log-zinc interpolation",
    sp.layout = list(rv, scale, text1, text2)
)
?levelplot
q()
dev = "postscript"
ext = ".eps"
fignum = 1
figure = function(n) {
    do.call(dev, list(file = paste("fig", n, ext, sep="")));
    n + 1
}
library(sp)
library(lattice)
postscript("gallery.ps")
trellis.par.set(sp.theme())
alphaChannelSupported = function() {
    # !is.na(match(names(dev.cur()), c("pdf", "PNG")))
    !is.na(match(names(dev.cur()), c("pdf")))
}
data(meuse)
coordinates(meuse)=~x+y
fignum = figure(fignum, dev)
spplot(meuse, "zinc", do.log = TRUE,
    key.space=list(x=0.2,y=0.9,corner=c(0,1)),
    scales=list(draw=T))
q()
dev = "postscript"
ext = ".eps"
fignum = 1
figure = function(n) {
    do.call(dev, list(file = paste("fig", n, ext, sep="")));
    n + 1
}
library(sp)
library(lattice)
# postscript("gallery.ps")
trellis.par.set(sp.theme())
alphaChannelSupported = function() {
    # !is.na(match(names(dev.cur()), c("pdf", "PNG")))
    !is.na(match(names(dev.cur()), c("pdf")))
}
data(meuse)
coordinates(meuse)=~x+y
fignum = figure(fignum, dev)
spplot(meuse, "zinc", do.log = TRUE,
    key.space=list(x=0.2,y=0.9,corner=c(0,1)),
    scales=list(draw=T))
q()
dev = "postscript"
ext = ".eps"
fignum = 1
figure = function(n, dev) {
    do.call(dev, list(file = paste("fig", n, ext, sep="")));
    n + 1
}
library(sp)
library(lattice)
# postscript("gallery.ps")
trellis.par.set(sp.theme())
alphaChannelSupported = function() {
    # !is.na(match(names(dev.cur()), c("pdf", "PNG")))
    !is.na(match(names(dev.cur()), c("pdf")))
}
data(meuse)
coordinates(meuse)=~x+y
fignum = figure(fignum, dev)
spplot(meuse, "zinc", do.log = TRUE,
    key.space=list(x=0.2,y=0.9,corner=c(0,1)),
    scales=list(draw=T))
dev.off()
q()
dev = "pdf"; ext = ".pdf"
fignum = 1
figure = function(n, dev) {
    do.call(dev, list(file = paste("fig", n, ext, sep="")));
    n + 1
}
library(sp)
library(lattice)
# postscript("gallery.ps")
trellis.par.set(sp.theme())
alphaChannelSupported = function() {
    # !is.na(match(names(dev.cur()), c("pdf", "PNG")))
    !is.na(match(names(dev.cur()), c("pdf")))
}
data(meuse)
coordinates(meuse)=~x+y
fignum = figure(fignum, dev)
spplot(meuse, "zinc", do.log = TRUE,
    key.space=list(x=0.2,y=0.9,corner=c(0,1)),
    scales=list(draw=T))
dev.off()
q()
# dev = "postscript"; ext = ".eps"
dev = "pdf"; ext = ".pdf"
fignum = 1
figure = function(n, dev) {
    do.call(dev, list(file = paste("fig", n, ext, sep="")));
    trellis.par.set(sp.theme())
    n + 1
}
library(lattice)
# postscript("gallery.ps")
# trellis.par.set(sp.theme())
alphaChannelSupported = function() {
    # !is.na(match(names(dev.cur()), c("pdf", "PNG")))
    !is.na(match(names(dev.cur()), c("pdf")))
}
data(meuse)
coordinates(meuse)=~x+y
fignum = figure(fignum, dev)
spplot(meuse, "zinc", do.log = TRUE,
    key.space=list(x=0.2,y=0.9,corner=c(0,1)),
    scales=list(draw=T))
dev.off()
q()
?pdf
?png
q()
library(lattice)
?panel.text
?text
q()
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
text1 = list("sp.text", c(180500,329900), "0", cex = .5, which = 4)
text2 = list("sp.text", c(181000,329900), "500 m", cex = .5, which = 4)
scale = list("SpatialRingsRescale", layout.scale.bar(),
    offset = c(180500,329800), scale = 500, fill=c("transparent","black"), which = 4)
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging with dist to river",
        "stratified kriging with flood freq", "inverse distance"),
    as.table = TRUE, main = "log-zinc interpolation",
    sp.layout = list(rv, scale, text1, text2)
)
library(sp)
zn = zn.ok
zn[["a"]] = zn.ok[["var1.pred"]]
zn[["b"]] = zn.uk[["var1.pred"]]
zn[["c"]] = zn.sk[["var1.pred"]]
zn[["d"]] = zn.id[["var1.pred"]]
text1 = list("sp.text", c(180500,329900), "0", cex = .5, which = 4)
text2 = list("sp.text", c(181000,329900), "500 m", cex = .5, which = 4)
scale = list("SpatialRingsRescale", layout.scale.bar(),
    offset = c(180500,329800), scale = 500, fill=c("transparent","black"), which = 4)
spplot(zn, c("a", "b", "c", "d"),
    names.attr = c("ordinary kriging", "universal kriging with dist to river",
        "stratified kriging with flood freq", "inverse distance"),
    as.table = TRUE, main = "log-zinc interpolation",
    sp.layout = list(rv, scale, text1, text2)
)
rv
names(rv)
rv[1]
q()
?postscript
q()
alpha
ifelse(TRUE, "blue", "white")
?gp.par
library(grid)
?gp.par
?grid.par
?par.gp
ls(pos=2)
?gpar
q()
q()
?png
?png
q()
q()
